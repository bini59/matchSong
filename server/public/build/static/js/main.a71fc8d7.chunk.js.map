{"version":3,"sources":["redux/roomSlice.js","redux/store.js","component/main/select.js","component/main/main.js","component/game/timer.js","component/game/hint.js","component/game/score.js","component/game/chat.js","component/game/game.js","App.js","reportWebVitals.js","index.js"],"names":["roomSlice","createSlice","name","initialState","rooms","reducers","changeRoom","state","action","idx","findIndex","i","title","payload","room","changeRooms","actions","selectRoom","configureStore","reducer","roomReducer","middleware","getDefaultMiddleware","concat","logger","Select","props","dispatch","useDispatch","useState","check","setCheck","info","useRef","genre","setGenre","maxNum","a","requestMetadata","method","headers","body","JSON","stringify","fetch","res","json","genreNum","parse","Genres","map","className","id","useEffect","users","songN","Song","type","ref","onClick","current","value","n","g","push","document","getElementsByClassName","Math","ceil","then","sendServer","renewRooms","closeWindow","Main","useSelector","onSelect","setSelect","roomList","Rooms","to","pathname","t","user","useTimer","sec","setSec","duration","onTimer","countdown","setInterval","clearInterval","Hint","hintN","setHintN","hint","setHint","hints","time","category","context","length","Score","slice","sort","b","score","style","backgroundColor","color","nickname","Message","chatt","console","log","$","innerHTML","socket","off","on","data","scrollTop","scrollHeight","timerOff","roomMaster","emit","first","num","skip","overflow","onKeyDown","e","key","input","chat","sendMsg","ctrlKey","code","Chat","setUser","usr","setUsr","setName","correct","Room","Name","username","disconnect","FuncstartGame","nameWindow","startGame","Game","useParams","setSocket","socketio","connect","ansState","setAnstrigger","ans","setAns","setTimer","src","url","play","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.a71fc8d7.chunk.js","sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\"\n\nexport const roomSlice = createSlice({\n    name : \"room\",\n    initialState : {\n        rooms : []\n    },\n    reducers : {\n        changeRoom : (state, action)=>{\n\n            let idx = state.rooms.findIndex(i => i.title === action.payload.title)\n            state.rooms[idx] = action.payload.room\n        },\n        changeRooms : (state, action)=>{\n            state.rooms = action.payload\n        }\n    }\n})\n\nexport const {changeRoom, changeRooms} = roomSlice.actions;\n\nexport const selectRoom = state => state.rooms.rooms;\n\nexport default roomSlice.reducer","import {configureStore} from \"@reduxjs/toolkit\"\nimport logger from \"redux-logger\"\nimport roomReducer from \"./roomSlice\"\n\nexport default configureStore({\n    reducer : {\n        rooms : roomReducer\n    },\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger)\n})","import React, {useState, useRef, useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\"\nimport {\n    changeRooms\n} from \"../../redux/roomSlice\"\n\n\nconst Select = (props)=>{\n    const dispatch = useDispatch();\n    \n\t// final check that make a room\n    const [check, setCheck] = useState((''))\n\t// room info selector\n    let info = [useRef(), useRef()]\n\n    // For input genres\n    const [genre, setGenre] = useState('');\n\n    const maxNum = async (genre)=>{\n        const recipeUrl = \"https://3001-orange-vicuna-9uo5wxk0.ws-us08.gitpod.io/room/genres\";\n        const requestMetadata = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(genre)\n        };\n        \n        // rendering Main\n        let res = await fetch(recipeUrl, requestMetadata)\n        let json = await res.json()\n        let genreNum = JSON.parse(json)[\"genre\"]\n\n        \n        setGenre(Genres.map((genre, idx)=>{\n            return (\n                <div key={idx} className=\"genreSel\">\n                    <span className=\"genreName\">{genre} : </span>\n                    <input className=\"genreInput\" id={genre} />\n                    <span> (max : {genreNum[idx]})</span>\n                </div>\n                \n            )\n        }))\n    }\n\n    \n    //Genres\n    const Genres = [\n        \"JPOP\",\n        \"애니(노래이름)\",\n        \"애니(애니이름)\",\n        \"캐릭터송(캐릭터)\",\n        \"여돌(~2020)\"\n    ]\n\t\n    useEffect(()=>{\n        maxNum({genre : Genres})\n    }, [])\n\n\t// initial room state\n    let rooms = {\n        title : \"\",\n        users : [],\n        genre : [],\n        songN : [0, 0],\n        Song : []\n    }\n\t\n\n    \n\t// when Add room=> dispatch room\n    const sendServer = (room)=>{\n        const recipeUrl = \"https://3001-orange-vicuna-9uo5wxk0.ws-us08.gitpod.io/room/add\";\n        const requestMetadata = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(room)\n        };\n\t\t\n\t\t// rendering Main\n        fetch(recipeUrl, requestMetadata)\n        .then(res => res.json())\n        .then(json=>dispatch(changeRooms(JSON.parse(json).rooms)))\n    }\n\n    return (\n        <div className=\"selectMode\">\n            <div className=\"selSection\">\n                <span>방 이름 : </span><input className=\"roomNo\" type=\"text\" ref={info[0]}/>\n            </div>\n            <div className=\"selSection\">\n                <span>장르</span><br/>\n                {genre}\n            </div>\n            <button className=\"deciBtn\" id=\"accept\" onClick={()=>{\n                rooms.title = info[0].current.value;\n                let n = 0\n                Genres.map((g, idx)=>{\n                    rooms.genre.push(document.getElementsByClassName(\"genreInput\")[idx].value)\n                    if(rooms.genre[idx] == \"\") rooms.genre[idx] = 0\n                    n += Math.ceil(rooms.genre[idx])\n                })\n                rooms.songN[1] = n;\n\t\t\t\t//create Check window and send room data to server\n                setCheck(\n\t\t\t\t\t<div className=\"checkMade\">\n\t\t\t\t\t\t<span>정말로 생성하시겠습니까?</span><br/>\n\t\t\t\t\t\t<button className=\"checkBtn\" onClick={()=>{\n\t\t\t\t\t\t\tsendServer(rooms)\n\t\t\t\t\t\t\t// randering Main\n\t\t\t\t\t\t\tprops.renewRooms();\n\t\t\t\t\t\t\tsetCheck('');\n\t\t\t\t\t\t\tprops.closeWindow()\n\t\t\t\t\t\t}}>확인</button>\n\t\t\t\t\t\t<button className=\"checkBtn\" onClick={()=>{setCheck('')}}>취소</button>\n\t\t\t\t\t</div>\n\t\t\t\t);\n            }}>확인</button>\n            {check}\n            <button className=\"deciBtn\" onClick={()=>{props.closeWindow()}}>취소</button>\n        </div>\n    );\n}\nexport default Select;","import React, { useState, useEffect } from 'react';\nimport Select from \"./select\";\nimport {Link} from \"react-router-dom\";\n\nimport {useSelector, useDispatch} from \"react-redux\"\nimport {\n  selectRoom,\n  changeRooms\n} from \"../../redux/roomSlice\"\n\nimport \"../../scss/app.scss\";\nimport \"../../scss/select.scss\"\n\n//Genres\nconst Genres = [\n  \"JPOP\",\n  \"애니(노래이름)\",\n  \"애니(애니이름)\",\n  \"캐릭터송(캐릭터)\",\n  \"여돌(~2020)\"\n]\n\n\n\nconst Main = (props)=>{\n    const dispatch = useDispatch();\n    // get Room list from redux Store \n    // first get from Store\n    // rooms = []\n    const rooms = useSelector(selectRoom)\n\t\n\t// fetch rooms from server\n\t// when room dispatched, This effect run\n\tuseEffect(()=>{\n\t\tconst recipeUrl = \"https://3001-orange-vicuna-9uo5wxk0.ws-us08.gitpod.io/room\";\n\t\tconst requestMetadata = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t'Accept': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify({})\n\t\t};\n\t\t//rendering Main\n\t\tfetch(recipeUrl, requestMetadata).then(res => res.json())\n\t\t.then(json => dispatch(changeRooms(JSON.parse(json).rooms)))\n    }, [dispatch])\n\n    // For select on/off\n    const [onSelect, setSelect] = useState(false);\n\n    // Construct room list with (rooms)\n\t// Rooms => room list\n\t// room  => item of Rooms\n    const roomList = (Rooms) => {return Rooms.map((room)=>{\n      let to = {\n        pathname : \"/game/\" + room.title,\n        state : {rooms : Rooms}\n      }\n      return (\n\t\t//key room title => not allow same room name \n        <li key={room.title} className=\"roomli\">\n          <Link to={to}>\n            <div className=\"room\">\n              <div className=\"title\">{room.title}</div>\n              <div className=\"genre\">[{room.genre.map((genre, t)=>{return(<span key={t}>{genre > 0 ? Genres[t]+\",\" : \"\"} </span>)})}]</div><br></br>\n              <div className=\"users\">{room.users.map((user)=>{return('ጿ')})}</div>\n              <div className=\"remainsong\">{room.songN[1]-room.songN[0]}/{room.songN[1]}</div>\n            </div>\n          </Link>\n        </li>\n      )\n    })};\n\n\n    return (\n        <div className=\"main\" >\n          <div id=\"mainTitle\"><span>노래 맞추기</span></div>\n          <div className=\"roomlist\">\n\t\t    <ul>\n\t\t\t  {roomList(rooms)}\n\t\t\t  <li className=\"roomli\" onClick={()=>{setSelect(true)}}><div className=\"addroom\">+</div></li>\n\t\t    </ul>\n          </div><br/>\n          {onSelect ? <Select \n            closeWindow={()=>{setSelect(false)}}\n            renewRooms={()=>{roomList(rooms)}}\n          /> : ''}\n        </div>\n    )\n}\n\nexport default Main;","import {useState, useEffect} from \"react\"\n\nconst useTimer = (props)=>{\n    const [sec, setSec] = useState(5000);\n\n    const idx = props.idx\n    const rooms = props.rooms\n\n    useEffect(()=>{\n        setSec(rooms[idx].Song[rooms[idx].songN[0]].duration)\n    }, [props.onTimer])\n\n    useEffect(()=>{\n        if(props.onTimer){\n            const countdown = setInterval(()=>{\n                if(sec > 0) setSec(sec-1)\n                else clearInterval(countdown)\n            }, 1000)\n    \n            return ()=>{\n                clearInterval(countdown)\n            }\n        }\n    })\n\n    return sec;\n}\n\nexport default useTimer;","import {useState, useEffect} from \"react\"\n\n//show hint\nconst Hint = (props)=>{\n    const [hintN, setHintN] = useState(0);\n    const [hint, setHint] = useState([])\n\n    useEffect(()=>{\n        setHintN(0)\n    }, [props.hints])\n\n    useEffect(()=>{\n        if(props.sec === props.hints[hintN].time){\n            setHint(()=>{\n                hint.push(\n                    <div key={props.hints[hintN].context}>\n                        <span className=\"hintMsg\">{props.hints[hintN].category} : </span>\n                        <span>{props.hints[hintN].context}</span>\n                    </div>\n                )\n                return hint\n            })\n            if(hintN < props.hints.length-1){\n                setHintN(hintN+1);\n            }\n        }\n    }, [props.sec, hint, hintN, props.hints])\n\n    return hint;\n}\n\nexport default Hint","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport {\n    selectRoom\n} from \"../../redux/roomSlice\"\n\nconst Score = (props)=>{\n\n    const rooms = useSelector(selectRoom)\n    const idx = props.idx\n\n\n\n    let users = rooms[idx].users.slice(0).sort((a, b)=>{\n        return b.score - a.score;\n    });\n\n\n    return(\n        <div className=\"scoreBoard\">\n            <ul className=\"li\">\n                {users.map((user)=>{\n                    return(\n                        <li key={user.nickname} className=\"Scoreli\">\n                            <div className=\"scoreColor\" style={{backgroundColor : user.color}}/>\n                            <div className=\"score\"> {user.score}</div>\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n}\n\nexport default Score;","import React, {useState, useRef, useEffect} from \"react\";\nimport {useDispatch} from \"react-redux\"\nimport {Link} from \"react-router-dom\";\n\nimport $ from \"jquery\"\n\nimport Score from \"./score\"\n\n\nimport {\n    changeRoom\n} from \"../../redux/roomSlice\"\n\nconst Message = (props)=>{\n\n    const chatt = useRef()\n\n    useEffect(()=>{\n        console.log(props)\n        $(\"#totalUsr\")[0].innerHTML = props.room[props.idx].users.length\n        props.socket.off(\"skipped\");\n        props.socket.on(\"skipped\", (data)=>{\n            $(\".chat\")[0].innerHTML += `<span><span style=\"color:red\">!</span> 스킵하셨습니다</span></br>`        \n            $(\".chat\")[0].scrollTop = $(\".chat\")[0].scrollHeight;\n            props.timerOff();\n            if(props.user.roomMaster)\n                props.socket.emit(\"req-start-game\", {\n                    title : props.room[props.idx].title,\n                    idx : props.idx,\n                    first : 0\n                })\n        })\n    }, [props.room])\n\n    useEffect(()=>{\n        props.socket.on(\"notice-skip\", (data)=>{\n            console.log($(\"#skipProgress\"))\n            $(\"#skipProgress\")[0].innerHTML = data.num;\n        })\n\n\n    }, [])\n\n    const sendMsg = ()=>{\n        let input = document.getElementsByClassName(\"input\")[0]\n        props.socket.emit(\"send-chat\", {\n            user : props.user,\n            chat : input.value,\n            title : props.title,\n            idx : props.idx\n        })\n        input.value = \"\";\n    }\n\n    const skip = ()=>{\n        props.socket.emit(\"vote-skip\", {\n            user : props.user,\n            title : props.title,\n            idx : props.idx,\n        })\n    }\n\n    return (\n        <div>\n            <div className=\"chat\" style={{overflow:\"auto\"}} ref={chatt}></div>\n            <input className=\"input\" type=\"text\" onKeyDown={(e)=>{\n                if(e.key===\"Enter\"){sendMsg()}\n                else if(e.ctrlKey===true && e.code ===\"Slash\" ){skip()}\n            }}/>\n            <button className=\"skipBtn\" onClick={()=>{skip()}}>스킵</button>\n            <div className=\"skip\">스킵에 투표하시려면 ctrl+/를 누르세요 ( <span id=\"skipProgress\">0</span> / <span id=\"totalUsr\"></span> )</div>\n        </div>\n    )\n}\n\n\n\nconst Chat = (props)=>{\n    \n    const dispatch = useDispatch();\n    //user info\n    const [user, setUser] = useState({\n        nickname : \"NONE\",\n        color : \"red\",\n        score : 0,\n        roomMaster : true\n    })\n\n    const rooms = props.rooms;\n    const idx = props.idx;\n\n    // For Add user\n    const [usr, setUsr] = useState(false)\n    const [name, setName] = useState(\"\")\n\n    useEffect(()=>{\n        props.socket.emit(\"join-room\", {title : rooms[idx].title})\n\n        props.socket.on(\"correct\", (data)=>{\n            props.correct();\n            $(\".chat\")[0].innerHTML += `<span><span style=\"color : ${data.user.color}; font-weigth:bold\">${data.user.nickname}</span><span> 정답입니다</span></span></br>`        \n            $(\".chat\")[0].scrollTop = $(\".chat\")[0].scrollHeight;\n            dispatch(changeRoom({\n                title : rooms[idx].title,\n                room : data.room\n            }))      \n        })\n    }, [])\n\n    useEffect(()=>{\n        props.socket.off(\"res-add-user\")\n        // add user and remove user\n        props.socket.on(\"res-add-user\", (Room)=>{\n            // rendering Game\n            dispatch(changeRoom({\n                title : rooms[idx].title,\n                room : Room\n            }))\n            if(Room.users[Room.users.length-1].nickname === name)\n                setUser(Room.users[Room.users.length-1])\n        })\n    }, [name])\n\n    // socket on\n    useEffect(()=>{\n        props.socket.on(\"remove-user\", (Room)=>{\n            // rendering Game\n            dispatch(changeRoom({\n                title : rooms[idx].title,\n                room : Room\n            }))\n        })\n\n        // Receive chat from server\n        props.socket.on(\"receive-chat\", (data)=>{\n            $(\".chat\")[0].innerHTML += `\n                <span className=\"chatMsg\">\n                    <span style=\"color : ${data.user.color}\">\n                        ${data.user.nickname}\n                    </span> \n                    : ${data.chat}<br/>\n                </span>\n            `\n            $(\".chat\")[0].scrollTop = $(\".chat\")[0].scrollHeight\n        })\n        \n        props.socket.on(\"end-game\", (data)=>{\n          dispatch(changeRoom({\n              title : rooms[idx].title,\n              room : data.room\n          }))  \n        })\n\n    }, [])\n\n\n\n\n    // Add user\n    useEffect(()=>{\n        if(usr){\n            let Name =$(\"#newNickname\")[0].value;\n            setName(Name)\n            // when nickname exist\n            // add user\n            if(Name !== \"\"){\n                props.socket.emit(\"req-add-user\", {\n                    room : rooms[idx],\n                    username : Name\n                });\n            }\n            // function of clean up\n            // when Chat unmount, remove user from server\n            return ()=>{\n                props.socket.emit(\"remove-user\",{\n                    room : rooms[idx],\n                    username : Name\n                })\n                props.socket.disconnect()\n            }\n\n        }\n    }, [usr])\n\n    useEffect(()=>{\n        props.socket.off(\"res-start-game\")\n        // start game\n        props.socket.on(\"res-start-game\", (data)=>{\n            props.FuncstartGame(rooms[idx]);\n        })\n    }, [rooms])\n\n    useEffect(()=>{\n        if(props.time===0 && user.roomMaster){\n            props.socket.emit(\"req-start-game\", {\n                title : rooms[idx].title,\n                idx : idx,\n                first : 0\n            })\n        }\n    }, [props.time])\n\n\n    const nameWindow = (\n        <div className=\"addUsr\">\n            <span className=\"nameInfo\">닉네임 입력</span><br/>\n            <input type=\"text\" id=\"newNickname\"/><br/>\n            <button className=\"nameOk\" onClick={()=>{setUsr(true)}}>확인</button>\n        </div>\n    )\n\n\n    return(\n        <div className=\"chatBox\">\n            <Score idx={idx}/>\n            <div className=\"chatBtn\">\n                {user.roomMaster?<button className=\"gameStart\" onClick={()=>{props.startGame()}}>게임 시작</button>: \"\"}\n                <Link to=\"/\">\n                    <button className=\"gameExit\" onClick={()=>{\n                        props.socket.emit(\"remove-user\",{\n                            room : rooms[idx],\n                            username : name\n                        })\n                        //go to home code\n                        props.socket.disconnect();\n                    }}>나가기</button>\n                </Link>\n            </div>\n            {user.nickname === \"NONE\" ? nameWindow : \"\"}\n            <div>\n                <Message \n                    socket={props.socket} \n                    user={user} \n                    idx={idx} \n                    room={rooms} \n                    title={rooms[idx].title}\n                    timerOff={()=>{\n                        props.timerOff()\n                        props.correct()\n                    }}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default Chat;","//Hooks\nimport React, {useState, useEffect} from \"react\";\nimport { useDispatch, useSelector} from \"react-redux\"\nimport {useParams} from \"react-router-dom\"\nimport useTimer from \"./timer\"\n\n//socketIo\nimport socketio from 'socket.io-client';\n\n//audioPlayer\nimport ReactAudioPlayer from \"react-audio-player\"\n\nimport Hint from \"./hint\"\nimport Chat from \"./chat\"\n\n\nimport $ from \"jquery\"\n\nimport {\n    changeRoom,\n    selectRoom\n} from \"../../redux/roomSlice\"\n\nimport \"../../scss/game.scss\"\nimport \"../../scss/quiz.scss\"\n\nconst Game = (props)=>{\n    let {id} = useParams();\n\n    // Set socket\n    const [socket, setSocket] = useState(null);\n    useEffect(()=>{\n        setSocket(socketio.connect(\"https://3001-orange-vicuna-9uo5wxk0.ws-us08.gitpod.io/\"))\n    }, [])\n\n    // Start game\n    useEffect(()=>{\n        if(socket){\n            // skip vote notice\n            socket.on(\"notice-skip\", (data)=>{\n                $(\"#skipProgress\")[0].innerHTML = data.num;\n            })\n        }\n    }, [])\n\n    // get room from redux store\n    // current room\n    const rooms = useSelector(selectRoom)\n    let idx = rooms.findIndex(i => i.title === id);\n\n    //Answer show trigger\n    const [ansState, setAnstrigger] = useState(false);\n    //Answer\n    const [ans, setAns] = useState(<div className=\"ans\"><span className=\"ansMsg\">답</span> : {rooms[idx].Song[rooms[idx].songN[0]].title}</div>)\n    //ontimer\n    const [onTimer, setTimer] = useState(false);\n\n    const time = useTimer({onTimer : onTimer, idx : idx, rooms : rooms});\n\n    /*\n        remove Ans\n        change Ans\n\n        remove Hint\n        remove skip vote progress\n\n        start  Timer\n        play   Song\n    */\n    const startGame = (Room)=>{\n        setTimer(false);\n        setAnstrigger(false);\n        setAns(<div className=\"ans\"><span className=\"ansMsg\">답</span> : {Room.Song[Room.songN[0]].title}</div>);\n\n        $(\".hint\")[0].innerHTML = \"\";\n        $(\"#skipProgress\")[0].innerHTML = 0;\n\n        setTimer(true);\n        $(\"#audio\")[0].play();\n    }\n\n    return(\n        <div className=\"quiz\">\n            <div className=\"title\">\n                <span className=\"remainSong\">남은곡 ( {rooms[idx].songN[1]-rooms[idx].songN[0]} / {rooms[idx].songN[1]} )</span><br/>\n                <span className=\"description\"><span className=\"_1\">음악</span>을 듣고 <span className=\"_2\">답</span>을 입력하세요</span><br/>\n                <span className=\"remainSec\">- {time}초 -</span><br/>\n                <ReactAudioPlayer \n                    src={rooms[idx].Song[rooms[idx].songN[0]].url}\n                    id=\"audio\"\n                    type=\"mpeg\"\n                />\n            </div>\n            <div className=\"hint\">\n                <Hint \n                    sec={time}\n                    hints={rooms[idx].Song[rooms[idx].songN[0]].hint}\n                />\n            </div>\n            {ansState ? ans : <div className=\"ans\"></div>}\n            {/* if socket, rendering Chat */}\n            {socket ?\n            <Chat \n                socket={socket} \n                rooms={rooms}\n                idx={idx} \n                time={time}\n                correct={()=>{setAnstrigger(true)}}\n                startGame={()=>{socket.emit(\"req-start-game\", {title : rooms[idx].title, idx : idx, first : -1})}}\n                FuncstartGame={(Room)=>{startGame(Room)}}\n                timerOff={()=>{setTimer(false)}}\n                />\n            : \"\"}\n        </div>\n    );\n}\n\n\nexport default Game;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Main from \"./component/main/main\"\nimport Game from \"./component/game/game\"\n\nconst App = ()=>{\n  return (\n  <Router>\n    <Switch>\n      <Route exact path=\"/\">\n        <Main />\n      </Route>\n      <Route path=\"/game/:id\">\n        <Game />\n      </Route>\n    </Switch>\n  </Router>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport './scss/index.scss';\nimport store from \"./redux/store\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}